#!/usr/bin/env bash
{% def escape(password) %}${password.replace('\\'', '\'\\\\\'\'')}{% end %}
set -e
while getopts "n" option; do
  if [[ "$${option}" == "n" ]]; then
    SKIP_DB_RESTORE=1;
  fi
done

if [[ ! -v SKIP_DB_RESTORE ]]; then
    echo '# Restoring database dump'
    echo 'Shutting down supervisor programs'
    ${parts.buildout['bin-directory']}/supervisorctl stop all || true
    {% for instance in parts.buildout['metabase-instances'].split('\n') %}
    echo ''
    echo '${instance}'
    psql postgresql://${parts[instance]['database-user']}:${parts[instance]['database-password']}@${parts[instance]['database-host']}:${parts[instance]['database-port']}/${parts[instance]['database-name']} -c "DROP SCHEMA IF EXISTS public CASCADE; CREATE SCHEMA public;" >/dev/null
    {% end %}
    echo ''
    echo 'Starting supervisor programs'
    ${parts.buildout['bin-directory']}/supervisorctl start all || ${parts.buildout['bin-directory']}/supervisord
    echo ''
fi
echo '# Applying instance specific settings'
{% for instance in parts.buildout['metabase-instances'].split('\n') %}
echo ''
echo '${instance}'
echo 'Waiting for ${instance} to come up...'
while ! curl --silent http://${parts[instance]['metabase-host']}:${parts[instance]['metabase-port']}/api/user/current > /dev/null; do
    sleep 5s;
    if ! bin/supervisorctl status ${instance} | grep "\(STARTING\|RUNNING\|BACKOFF\)"; then
        echo 'ERROR: ${instance} did not start properly! See supervisor log for details'
        exit 1
    fi
done
${parts.buildout['bin-directory']}/init-metabase-instance \\
    --metabase-host='${parts[instance]['metabase-host']}' \\
    --metabase-port='${parts[instance]['metabase-port']}' \\
    --metabase-user='${parts[instance]['metabase-user']}' \\
    --metabase-password='${escape(parts[instance]['metabase-password'])}' \\
    --database-name='${parts[instance]['database-name']}' \\
    --database-host='${parts[instance]['database-host']}' \\
    --database-port='${parts[instance]['database-port']}' \\
    --database-user='${parts[instance]['database-user']}' \\
    --database-password='${escape(parts[instance]['database-password'])}' \\
    {% if parts[instance].get('ldap-password') %} \\
    --ldap-host='${parts[instance]['ldap-host']}' \\
    --ldap-port='${parts[instance]['ldap-port']}' \\
    --ldap-bind-dn='${parts[instance]['ldap-bind-dn']}' \\
    --ldap-password='${parts[instance]['ldap-password']}' \\
    --ldap-user-base='${parts[instance]['ldap-user-base']}' \\
    --ldap-user-filter='${parts[instance]['ldap-user-filter']}' \\
    --ldap-attribute-firstname='${parts[instance].get('ldap-attribute-firstname', 'givenName')}' \\
    {% end %} \\
    {% if parts[instance].get('statistics-user') %} \\
        {% for user in parts[instance].get('statistics-user').split('\n') %} \\
            {% with email, password, first_name, last_name = user.split(' ') %} \\
    --statistics-user '${email}' '${escape(password)}' '${first_name}' '${last_name}' \\
            {% end %} \\
        {% end %} \\
    {% end %} \\
    {% if parts[instance].get('global-statistics') == 'true' %} \\
    --global-statistics \\
    {% end %} \\
    {% if parts[instance].get('countries') %} \\
    --countries='${parts[instance]['countries']}' \\
    {% end %} \\
    || exit $?
{% end %}
